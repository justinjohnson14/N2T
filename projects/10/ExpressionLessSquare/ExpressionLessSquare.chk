<keyword>class</keyword>
<identifier>Square</identifier>
<symbol>{</symbol>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>x,</identifier>
<identifier>y;</identifier>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>size;</identifier>
<keyword>constructor</keyword>
<identifier>Square</identifier>
<identifier>new(int</identifier>
<identifier>Ax,</identifier>
<keyword>int</keyword>
<identifier>Ay,</identifier>
<keyword>int</keyword>
<identifier>Asize)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<identifier>Ax;</identifier>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<identifier>Ay;</identifier>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<identifier>Asize;</identifier>
<keyword>do</keyword>
<identifier>draw();</identifier>
<keyword>return</keyword>
<identifier>x;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose()</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Memory.deAlloc(this);</identifier>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>draw()</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>erase()</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>incSize()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>x)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>erase();</identifier>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<identifier>size;</identifier>
<keyword>do</keyword>
<identifier>draw();</identifier>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>decSize()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>size)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>erase();</identifier>
<keyword>let</keyword>
<identifier>size</identifier>
<symbol>=</symbol>
<identifier>size;</identifier>
<keyword>do</keyword>
<identifier>draw();</identifier>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveUp()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>y)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<identifier>y;</identifier>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveDown()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>y)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<keyword>let</keyword>
<identifier>y</identifier>
<symbol>=</symbol>
<identifier>y;</identifier>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveLeft()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>x)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<identifier>x;</identifier>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveRight()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>x)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<keyword>let</keyword>
<identifier>x</identifier>
<symbol>=</symbol>
<identifier>x;</identifier>
<keyword>do</keyword>
<identifier>Screen.setColor(x);</identifier>
<keyword>do</keyword>
<identifier>Screen.drawRectangle(x,</identifier>
<identifier>y,</identifier>
<identifier>x,</identifier>
<identifier>y);</identifier>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>class</keyword>
<identifier>Main</identifier>
<symbol>{</symbol>
<keyword>static</keyword>
<keyword>boolean</keyword>
<identifier>test;</identifier>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>main()</identifier>
<symbol>{</symbol>
<keyword>var</keyword>
<identifier>SquareGame</identifier>
<identifier>game;</identifier>
<keyword>let</keyword>
<identifier>game</identifier>
<symbol>=</symbol>
<identifier>game;</identifier>
<keyword>do</keyword>
<identifier>game.run();</identifier>
<keyword>do</keyword>
<identifier>game.dispose();</identifier>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>function</keyword>
<keyword>void</keyword>
<identifier>more()</identifier>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifier>b;</identifier>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>b)</identifier>
<symbol>{</symbol>
<symbol>}</symbol>
<keyword>else</keyword>
<symbol>{</symbol>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<symbol>}</symbol>
<keyword>class</keyword>
<identifier>SquareGame</identifier>
<symbol>{</symbol>
<keyword>field</keyword>
<identifier>Square</identifier>
<identifier>square;</identifier>
<keyword>field</keyword>
<keyword>int</keyword>
<identifier>direction;</identifier>
<keyword>constructor</keyword>
<identifier>SquareGame</identifier>
<identifier>new()</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>square</identifier>
<symbol>=</symbol>
<identifier>square;</identifier>
<keyword>let</keyword>
<identifier>direction</identifier>
<symbol>=</symbol>
<identifier>direction;</identifier>
<keyword>return</keyword>
<identifier>square;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>dispose()</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.dispose();</identifier>
<keyword>do</keyword>
<identifier>Memory.deAlloc(square);</identifier>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>moveSquare()</identifier>
<symbol>{</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>direction)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.moveUp();</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>direction)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.moveDown();</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>direction)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.moveLeft();</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>direction)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.moveRight();</identifier>
<symbol>}</symbol>
<keyword>do</keyword>
<identifier>Sys.wait(direction);</identifier>
<identifier>return;</identifier>
<symbol>}</symbol>
<keyword>method</keyword>
<keyword>void</keyword>
<identifier>run()</identifier>
<symbol>{</symbol>
<keyword>var</keyword>
<keyword>char</keyword>
<identifier>key;</identifier>
<keyword>var</keyword>
<keyword>boolean</keyword>
<identifier>exit;</identifier>
<keyword>let</keyword>
<identifier>exit</identifier>
<symbol>=</symbol>
<identifier>key;</identifier>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>exit)</identifier>
<symbol>{</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>key</identifier>
<symbol>=</symbol>
<identifier>key;</identifier>
<keyword>do</keyword>
<identifier>moveSquare();</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>exit</identifier>
<symbol>=</symbol>
<identifier>exit;</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.decSize();</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>do</keyword>
<identifier>square.incSize();</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>direction</identifier>
<symbol>=</symbol>
<identifier>exit;</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>direction</identifier>
<symbol>=</symbol>
<identifier>key;</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>direction</identifier>
<symbol>=</symbol>
<identifier>square;</identifier>
<symbol>}</symbol>
<keyword>if</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>direction</identifier>
<symbol>=</symbol>
<identifier>direction;</identifier>
<symbol>}</symbol>
<keyword>while</keyword>
<symbol>(</symbol>
<identifier>key)</identifier>
<symbol>{</symbol>
<keyword>let</keyword>
<identifier>key</identifier>
<symbol>=</symbol>
<identifier>key;</identifier>
<keyword>do</keyword>
<identifier>moveSquare();</identifier>
<symbol>}</symbol>
<symbol>}</symbol>
<identifier>return;</identifier>
<symbol>}</symbol>
<symbol>}</symbol>
